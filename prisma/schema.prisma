generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String?
  profileImage String?
  phone        String     @unique
  email        String     @unique
  password     String
  bio          String?
  role         Role
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bloodType    BloodType?
  location     String?
  isVerified   Boolean    @default(false)
  lastActive   DateTime?
  isDeleted    Boolean    @default(false)

  donorDetails  DonorDetail[]
  bloodRequests BloodRequest[] @relation("UserRequests")
  Donation      Donation[]
  Notification  Notification[]

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  name         String?
  profileImage String?
  bio          String?
  phone        String
  password     String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)

  @@map("admins")
}

model DonorDetail {
  id               String    @id @default(uuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bloodType        BloodType
  healthInfo       String?
  donationCount    Int       @default(0)
  availability     Boolean   @default(true)
  canTravel        Boolean   @default(false)
  location         String
  lastDonationDate DateTime?

  @@unique([userId])
  @@map("donor_details")
}

model BloodRequest {
  id            String       @id @default(uuid())
  requesterId   String
  requester     User         @relation("UserRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  bloodType     BloodType
  location      String
  urgency       UrgencyLevel
  status        Status       @default(PENDING)
  patientName   String
  hospital      String?
  unitsNeeded   Int          @default(1)
  caseDetails   String?
  contactPerson String
  createdAt     DateTime     @default(now())

  @@index([bloodType])
  @@index([urgency])
  @@index([status])
  @@map("blood_requests")
}

model Donation {
  id        String   @id @default(uuid())
  donorId   String
  donor     User     @relation(fields: [donorId], references: [id])
  requestId String?
  date      DateTime @default(now())
  location  String
  verified  Boolean  @default(false)

  @@map("donation")
}

model Community {
  id        String   @id @default(uuid())
  name      String
  message   String
  email     String
  createdAt DateTime @default(now())

  @@map("community")
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  organizer   String
  maxDonors   Int?
  location    String
  createdAt   DateTime  @default(now())

  @@map("event")
}

model Notification {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  type      UrgencyLevel
  message   String
  read      Boolean      @default(false)
  createdAt DateTime     @default(now())
}

enum Role {
  DONOR
  RECIPIENT
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  FULFILLED
}

enum BloodType {
  O_POS
  O_NEG
  A_POS
  A_NEG
  AB_POS
  AB_NEG
  B_POS
  B_NEG
}

enum UrgencyLevel {
  LOW // Needed within weeks
  MEDIUM // Needed within days
  HIGH // Needed within 24h
  CRITICAL // Needed immediately
}
